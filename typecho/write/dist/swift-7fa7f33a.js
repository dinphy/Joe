function wordSet(e){for(var t={},n=0;n<e.length;n++)t[e[n]]=!0;return t}var keywords=wordSet(["_","var","let","class","enum","extension","import","protocol","struct","func","typealias","associatedtype","open","public","internal","fileprivate","private","deinit","init","new","override","self","subscript","super","convenience","dynamic","final","indirect","lazy","required","static","unowned","unowned(safe)","unowned(unsafe)","weak","as","is","break","case","continue","default","else","fallthrough","for","guard","if","in","repeat","switch","where","while","defer","return","inout","mutating","nonmutating","catch","do","rethrows","throw","throws","try","didSet","get","set","willSet","assignment","associativity","infix","left","none","operator","postfix","precedence","precedencegroup","prefix","right","Any","AnyObject","Type","dynamicType","Self","Protocol","__COLUMN__","__FILE__","__FUNCTION__","__LINE__"]),definingKeywords=wordSet(["var","let","class","enum","extension","import","protocol","struct","func","typealias","associatedtype","for"]),atoms=wordSet(["true","false","nil","self","super","_"]),types=wordSet(["Array","Bool","Character","Dictionary","Double","Float","Int","Int8","Int16","Int32","Int64","Never","Optional","Set","String","UInt8","UInt16","UInt32","UInt64","Void"]),operators="+-/*%=|&<>~^?!",punc=":;,.(){}[]",binary=/^\-?0b[01][01_]*/,octal=/^\-?0o[0-7][0-7_]*/,hexadecimal=/^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/,decimal=/^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/,identifier=/^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/,property=/^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/,instruction=/^\#[A-Za-z]+/,attribute=/^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;function tokenBase(e,t,n){if(e.sol()&&(t.indented=e.indentation()),e.eatSpace())return null;var r=e.peek();if("/"==r){if(e.match("//"))return e.skipToEnd(),"comment";if(e.match("/*"))return t.tokenize.push(tokenComment),tokenComment(e,t)}if(e.match(instruction))return"builtin";if(e.match(attribute))return"attribute";if(e.match(binary))return"number";if(e.match(octal))return"number";if(e.match(hexadecimal))return"number";if(e.match(decimal))return"number";if(e.match(property))return"property";if(-1<operators.indexOf(r))return e.next(),"operator";if(-1<punc.indexOf(r))return e.next(),e.match(".."),"punctuation";if(r=e.match(/("""|"|')/)){var i=tokenString.bind(null,r[0]);return t.tokenize.push(i),i(e,t)}if(e.match(identifier)){i=e.current();return types.hasOwnProperty(i)?"type":atoms.hasOwnProperty(i)?"atom":keywords.hasOwnProperty(i)?(definingKeywords.hasOwnProperty(i)&&(t.prev="define"),"keyword"):"define"==n?"def":"variable"}return e.next(),null}function tokenUntilClosingParen(){var r=0;return function(e,t,n){n=tokenBase(e,t,n);if("punctuation"==n)if("("==e.current())++r;else if(")"==e.current()){if(0==r)return e.backUp(1),t.tokenize.pop(),t.tokenize[t.tokenize.length-1](e,t);--r}return n}}function tokenString(e,t,n){for(var r,i=1==e.length,o=!1;r=t.peek();)if(o){if(t.next(),"("==r)return n.tokenize.push(tokenUntilClosingParen()),"string";o=!1}else{if(t.match(e))return n.tokenize.pop(),"string";t.next(),o="\\"==r}return i&&n.tokenize.pop(),"string"}function tokenComment(e,t){for(var n;e.match(/^[^/*]+/,!0),n=e.next();)"/"===n&&e.eat("*")?t.tokenize.push(tokenComment):"*"===n&&e.eat("/")&&t.tokenize.pop();return"comment"}function Context(e,t,n){this.prev=e,this.align=t,this.indented=n}function pushContext(e,t){t=t.match(/^\s*($|\/[\/\*])/,!1)?null:t.column()+1;e.context=new Context(e.context,t,e.indented)}function popContext(e){e.context&&(e.indented=e.context.indented,e.context=e.context.prev)}const swift={startState:function(){return{prev:null,context:null,indented:0,tokenize:[]}},token:function(e,t){var n=t.prev;t.prev=null;var r=(t.tokenize[t.tokenize.length-1]||tokenBase)(e,t,n);return r&&"comment"!=r?t.prev||(t.prev=r):t.prev=n,"punctuation"!=r||(n=/[\(\[\{]|([\]\)\}])/.exec(e.current()))&&(n[1]?popContext:pushContext)(t,e),r},indent:function(e,t,n){e=e.context;if(!e)return 0;t=/^[\]\}\)]/.test(t);return null!=e.align?e.align-(t?1:0):e.indented+(t?0:n.unit)},languageData:{indentOnInput:/^\s*[\)\}\]]$/,commentTokens:{line:"//",block:{open:"/*",close:"*/"}},closeBrackets:{brackets:["(","[","{","'",'"',"`"]}}};export{swift};
