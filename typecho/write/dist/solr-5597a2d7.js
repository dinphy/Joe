var isStringChar=/[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/,isOperatorChar=/[\|\!\+\-\*\?\~\^\&]/,isOperatorString=/^(OR|AND|NOT|TO)$/i;function isNumber(t){return parseFloat(t).toString()===t}function tokenString(o){return function(t,e){for(var n,r=!1;null!=(n=t.next())&&(n!=o||r);)r=!r&&"\\"==n;return r||(e.tokenize=tokenBase),"string"}}function tokenOperator(n){return function(t,e){return"|"==n?t.eat(/\|/):"&"==n&&t.eat(/\&/),e.tokenize=tokenBase,"operator"}}function tokenWord(r){return function(t,e){for(var n=r;(r=t.peek())&&null!=r.match(isStringChar);)n+=t.next();return e.tokenize=tokenBase,isOperatorString.test(n)?"operator":isNumber(n)?"number":":"==t.peek()?"propertyName":"string"}}function tokenBase(t,e){var n=t.next();return'"'==n?e.tokenize=tokenString(n):isOperatorChar.test(n)?e.tokenize=tokenOperator(n):isStringChar.test(n)&&(e.tokenize=tokenWord(n)),e.tokenize!=tokenBase?e.tokenize(t,e):null}const solr={startState:function(){return{tokenize:tokenBase}},token:function(t,e){return t.eatSpace()?null:e.tokenize(t,e)}};export{solr};
